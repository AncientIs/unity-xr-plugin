using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditor.PackageManager;
using UnityEditor.PackageManager.Requests;
using UnityEngine;
using UnityEngine.Networking;

namespace Unity.XR.OpenVR
{
    [InitializeOnLoad]
    public class OpenVRAutoUpdater : ScriptableObject
    {
        private const string valveOpenVRPackageString = "com.valvesoftware.unity.openvr";
        private const string valveOpenVRGitURL = "https://github.com/ValveSoftware/steamvr_unity_plugin.git#UnityXRPlugin";

        //public const string npmRegistryStringValue = "\"name\": \"Valve\", \"url\": \"https://registry.npmjs.org\", \"scopes\": [ \"com.valvesoftware.unity.openvr\" ]";
        //public const string scopedRegisteryKey = "scopedRegistries";

        private static ListRequest listRequest;
        private static AddRequest addRequest;
        private static RemoveRequest removeRequest;

        private static System.Diagnostics.Stopwatch packageTime = new System.Diagnostics.Stopwatch();
        private const float estimatedTimeToInstall = 90; // in seconds

        private const string updaterKeyTemplate = "com.valve.valvesoftware.updateState.{0}";
        private static string updaterKey
        {
            get { return string.Format(updaterKeyTemplate, Application.productName); }
        }

        private static UpdateStates updateState
        {
            get { return _updateState; }
            set 
            { 
                _updateState = value;
                EditorPrefs.SetInt(updaterKey, (int)value);
            }
        }
        private static UpdateStates _updateState = UpdateStates.Idle;

        private static double runningSeconds
        {
            get
            {
                if (packageTime.IsRunning == false)
                    packageTime.Start();
                return packageTime.Elapsed.TotalSeconds;
            }
        }

        static OpenVRAutoUpdater()
        {
            EditorApplication.update -= Update;
            EditorApplication.update += Update;
        }

        /// <summary>
        /// State Machine
        /// Idle: Start from last known state. If none is known go to request a removal of the current openvr package
        /// WaitingForRemove: if the remove request has been nulled or completed successfully, request a list of packages for confirmation
        /// WaitingForRemoveConfirmation: enumerate the packages and verify the removal succeeded. If it failed, try again. 
        ///                                 If it succeeded, try to add the new package.
        /// WaitingForAdd: if the add request has been nulled or completed successfully, request a list of packages for confirmation
        /// WaitingForAddConfirmation: enumerate the packages and verify the add succeeded. If it failed, try again.
        ///                                 If it succeeded request removal of this script
        /// RemoveSelf: delete the key that we've been using to maintain state. Delete this script and the containing folder if it's empty.
        /// </summary>
        private static void Update()
        {
            switch (updateState)
            {
                case UpdateStates.Idle:
                    if (EditorPrefs.HasKey(updaterKey))
                    {
                        _updateState = (UpdateStates)EditorPrefs.GetInt(updaterKey);
                        packageTime.Start();
                    }
                    else
                    {
                        RequestRemove();
                        packageTime.Start();
                    }
                    break;

                case UpdateStates.WaitingForRemove:
                    if (removeRequest == null)
                    {
                        //if our remove request was nulled out we should check if the package has already been removed.
                        RequestRemoveConfirmation();
                    }
                    else if (removeRequest != null && removeRequest.IsCompleted)
                    {
                        if (removeRequest.Error != null || removeRequest.Status == UnityEditor.PackageManager.StatusCode.Failure)
                        {
                            DisplayErrorAndStop("Error removing old version of OpenVR package.", removeRequest);
                        }
                        else
                        {
                            //verify that the package has been removed (then add)
                            RequestRemoveConfirmation();
                        }
                    }
                    else
                    {
                        if (packageTime.Elapsed.TotalSeconds > estimatedTimeToInstall)
                            DisplayErrorAndStop("Error removing old version of OpenVR package.", removeRequest);
                        else
                            DisplayProgressBar();
                    }
                    break;

                case UpdateStates.WaitingForRemoveConfirmation:
                    if (listRequest == null)
                    {
                        //the list request got nulled for some reason. Request it again.
                        RequestRemoveConfirmation();
                    }
                    if (listRequest != null && listRequest.IsCompleted)
                    {
                        if (listRequest.Error != null || listRequest.Status == UnityEditor.PackageManager.StatusCode.Failure)
                        {
                            DisplayErrorAndStop("Error while confirming package removal.", listRequest);
                        }
                        else
                        {
                            if (listRequest.Result.Any(package => package.name == valveOpenVRPackageString))
                            {
                                //try remove again if it didn't work and we don't know why.
                                RequestRemove();
                            }
                            else
                            {
                                //if it has successfully been removed then add the new one.
                                RequestAdd();
                            }
                        }
                    }
                    else
                    {
                        if (runningSeconds > estimatedTimeToInstall)
                        {
                            DisplayErrorAndStop("Error while confirming package removal.", listRequest);
                        }
                        else
                            DisplayProgressBar();
                    }
                    break;

                case UpdateStates.WaitingForAdd:
                    if (addRequest == null)
                    {
                        //the add request got nulled for some reason. Request an add confirmation
                        RequestAddConfirmation();
                    }
                    else if (addRequest != null && addRequest.IsCompleted)
                    {
                        if (addRequest.Error != null || addRequest.Status == UnityEditor.PackageManager.StatusCode.Failure)
                        {
                            DisplayErrorAndStop("Error adding new version of OpenVR package.", addRequest);
                        }
                        else
                        {
                            //verify that the package has been added (then stop)
                            RequestAddConfirmation();
                        }
                    }
                    else
                    {
                        if (packageTime.Elapsed.TotalSeconds > estimatedTimeToInstall)
                            DisplayErrorAndStop("Error while trying to add package.", addRequest);
                        else
                            DisplayProgressBar();
                    }
                    break;

                case UpdateStates.WaitingForAddConfirmation:
                    if (listRequest == null)
                    {
                        //the list request got nulled for some reason. Request it again.
                        RequestAddConfirmation();
                    }
                    else if (listRequest != null && listRequest.IsCompleted)
                    {
                        if (listRequest.Error != null || listRequest.Status == UnityEditor.PackageManager.StatusCode.Failure)
                        {
                            DisplayErrorAndStop("Error while confirming the OpenVR package has been added.", listRequest);
                        }
                        else
                        {
                            if (listRequest.Result.Any(package => package.name == valveOpenVRPackageString))
                            {
                                updateState = UpdateStates.RemoveSelf;
                                UnityEditor.EditorUtility.DisplayDialog("OpenVR", "OpenVR Unity XR successfully updated.", "Ok");
                            }
                            else
                            {
                                //try to add again if it's not there and we don't know why
                                RequestAdd();
                            }
                        }
                    }
                    else
                    {
                        if (runningSeconds > estimatedTimeToInstall)
                        {
                            DisplayErrorAndStop("Error while confirming the OpenVR package has been added.", listRequest);
                        }
                        else
                            DisplayProgressBar();
                    }
                    break;

                case UpdateStates.RemoveSelf:
                    EditorPrefs.DeleteKey(updaterKey);
                    EditorUtility.ClearProgressBar();
                    EditorApplication.update -= Update;

                    var script = MonoScript.FromScriptableObject(OpenVRAutoUpdater.CreateInstance<OpenVRAutoUpdater>());
                    var path = AssetDatabase.GetAssetPath(script);
                    FileInfo windowScript = new FileInfo(path);
                    FileInfo windowScriptMeta = new FileInfo(path + ".meta");

                    windowScript.Delete();
                    windowScriptMeta.Delete();
                    if (windowScript.Directory.GetFiles().Length == 0 && windowScript.Directory.GetDirectories().Length == 0)
                    {
                        path = windowScript.Directory.FullName + ".meta";
                        windowScript.Directory.Delete();
                        File.Delete(path);
                    }

                    AssetDatabase.Refresh();
                    break;
            }
        }

        private static void RequestRemove()
        {
            updateState = UpdateStates.WaitingForRemove;
            removeRequest = UnityEditor.PackageManager.Client.Remove(valveOpenVRPackageString);
        }

        private static void RequestAdd()
        {
            updateState = UpdateStates.WaitingForAdd;
            addRequest = UnityEditor.PackageManager.Client.Add(valveOpenVRGitURL);
        }

        private static void RequestRemoveConfirmation()
        {
            updateState = UpdateStates.WaitingForRemoveConfirmation;
            listRequest = Client.List();
        }

        private static void RequestAddConfirmation()
        {
            updateState = UpdateStates.WaitingForAddConfirmation;
            listRequest = Client.List();
        }

        private static string dialogText = "Installing OpenVR Unity XR package from github using Unity Package Manager...";

        private static void DisplayProgressBar()
        {
            bool cancel = UnityEditor.EditorUtility.DisplayCancelableProgressBar("SteamVR", dialogText, (float)packageTime.Elapsed.TotalSeconds / estimatedTimeToInstall);
            if (cancel)
                Stop();
        }

        private static void DisplayErrorAndStop(string stepInfo, Request request)
        {
            UnityEngine.Debug.LogError("[OpenVR Plugin] Error confirming removing old version of OpenVR package.");
            Stop();

            string error = "";
            if (request != null)
                error = request.Error.message;

            UnityEditor.EditorUtility.DisplayDialog("OpenVR Error", string.Format("{0}:\n\t{1}\n\nPlease manually reinstall the package through the package manager.", stepInfo, error), "Ok");
        }

        private static void Stop()
        {
            updateState = UpdateStates.RemoveSelf;
        }

        private enum UpdateStates
        {
            Idle,
            Failed,
            Succeeded,
            Listing,
            VersionWebRequest,
            ChangelogWebRequest,
            WaitingForRemove,
            WaitingForRemoveConfirmation,
            WaitingForAdd,
            WaitingForAddConfirmation,
            RemoveSelf,
        }
    }
}